ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
print("in function 1")
set<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(get=get, set=set, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("Matrix inverse available")
print(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
#x$set_inverse(inv)
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
print("in function 1")
set<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(get=get, set=set, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("Matrix inverse available")
print(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
inv
#x$set_inverse(inv)
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
print("in function 1")
set<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(get=get, set=set, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("Matrix inverse available")
print(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
x$set_inverse(inv)
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
print("in function 1")
set<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(get=get, set=set, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("Matrix inverse available")
print(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
x$setInverse(inv)
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
print("in function 1")
set<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(get=get, set=set, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("Matrix inverse available")
print(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
x$setInverse(inv)
inv
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("getting cached Matrix inverse")
return(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
x$setInverse(inv)
inv
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
print("in function 1")
set_matrix<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get_matrix<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(get=get_matrix, set=set_matrix, getInverse=get_inverse,setInverse=set_inverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("getting cached Matrix inverse")
return(val_inverse)
}
else{
temp_matrix<-x$get()
inv<-solve(temp_matrix)
x$setInverse(inv)
inv
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$get() # print marix
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
cacheSolve(ret)
ret
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set_matrix<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get_matrix<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(getMatrix=get_matrix, setMatrix=set_matrix, getInverse=get_inverse,setInverse=set_inverse)
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("getting cached Matrix inverse")
return(val_inverse)
}
else{
temp_matrix<-x$get_matrix()
inv<-solve(temp_matrix)
x$setInverse(inv)
inv
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix() # print matrx
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set_matrix<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get_matrix<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(getMatrix=get_matrix, setMatrix=set_matrix, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("getting cached Matrix inverse")
return(val_inverse)
}
else{
temp_matrix<-x$getMatrix()
inv<-solve(temp_matrix)
x$setInverse(inv)
inv
}
}
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix() # print matrx
ret$getInverse() # should be NULL the first one
cacheSolve(ret)
# Author: Sanjeev Sariya
# Date Feb 09 2016
## Put comments here that give an overall description of what your
## functions do
# Function - makeCacheMatrix - creates a matrix:
#                               if provided by argument it will set it that, otherwise
#                               the default matrix will be set
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set_matrix<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get_matrix<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(getMatrix=get_matrix, setMatrix=set_matrix, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("getting cached Matrix inverse")
return(val_inverse)
}
else{
temp_matrix<-x$getMatrix()
inv<-solve(temp_matrix) # get inverse
x$setInverse(inv) # set the inverse
inv
}
}
### HOW TO RUN --
# m<-matrix(1:4,nrow = 2,ncol = 2)
# ret<-makeCacheMatrix(m)
# ret$getMatrix() # print matrx
# ret$getInverse() # should be NULL the first one
# cacheSolve(ret)
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
cacheSolve(ret)
m<-matrix(9:1,nrow = 3,ncol = 3)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(10:18,nrow = 3,ncol = 3)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(1:12,nrow = 4,ncol = 3)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(1:16,nrow = 4,ncol = 4)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(1:16,nrow = 4,ncol = 4)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(16:30,nrow = 4,ncol = 4)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(16:31,nrow = 4,ncol = 4)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(1:4,nrow = 4,ncol = 4)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
solve(matrix(1:9,3,3))
det(matrix(c(1:9),3,3))
det(matrix(c(9:9),3,3))
det(matrix(c(19:9),3,3))
det(matrix(c(19:10),3,3))
det(matrix(c(19:11),3,3))
det(matrix(c(18:10),3,3))
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
cacheSolve(ret)
m<-matrix(1:9,nrow = 3,ncol = 3)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
makeCacheMatrix <- function(x = matrix()) {
inv<-NULL
set_matrix<-function(matrix_temp){
x<<-matrix_temp
inv<<-NULL
}
get_matrix<-function(){
x
}
get_inverse<-function(){
inv
}
set_inverse<-function(matrix_inverse){
inv<<-matrix_inverse
}
list(getMatrix=get_matrix, setMatrix=set_matrix, getInverse=get_inverse,setInverse=set_inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
val_inverse<-x$getInverse()
if(!is.null(val_inverse)){
print("getting cached Matrix inverse")
return(val_inverse)
}
else{
temp_matrix<-x$getMatrix()
if(det(temp_matrix)==0){
print("Cannot get the inverse of your matrix as it Det is 0")
}
else{
inv<-solve(temp_matrix) # get inverse
x$setInverse(inv) # set the inverse
inv
}
}
}
m<-matrix(1:9,nrow = 3,ncol = 3)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
getwd()
setwd("/Users/sariyasanjeev/Documents/Coursera/")
setwd("coursera_submission_1/Programming_assignment_2/")
dir()
source("cachematrix.R")
m<-matrix(1:4,nrow = 2,ncol = 2)
ret<-makeCacheMatrix(m)
ret$getMatrix() # print matrx
ret$getInverse() #
cacheSolve(ret)
m<-matrix(1:9,nrow = 3,ncol = 3)
ret<-makeCacheMatrix(m)
ret$getMatrix()
ret$getInverse()
cacheSolve(ret)
